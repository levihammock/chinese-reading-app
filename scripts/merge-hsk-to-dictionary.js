const fs = require('fs');
const path = require('path');
const csvParse = require('csv-parse/sync');

// Paths
const hskCsvPath = path.join(__dirname, '../data/hsk-3.0-word-list.csv');
const cedictPath = path.join(__dirname, '../src/data/cedict-dictionary.ts');
const outputPath = path.join(__dirname, '../src/data/cedict-dictionary-merged.ts');

// Read and parse HSK CSV
const hskCsv = fs.readFileSync(hskCsvPath, 'utf8');
const hskRows = csvParse.parse(hskCsv, { columns: true });

// Build Hanzi -> HSK level map
const hskMap = new Map();
for (const row of hskRows) {
  const hanzi = row['Hanzi'] && row['Hanzi'].trim();
  const level = parseInt(row['HSK_3_0_Level'], 10);
  if (hanzi && level && !isNaN(level)) {
    if (!hskMap.has(hanzi) || hskMap.get(hanzi) > level) {
      hskMap.set(hanzi, level);
    }
  }
}

// Read and parse cedict-dictionary.ts
const cedictRaw = fs.readFileSync(cedictPath, 'utf8');
const arrStart = cedictRaw.indexOf('= [');
const arrEnd = cedictRaw.lastIndexOf('];');
if (arrStart === -1 || arrEnd === -1) {
  throw new Error('Could not find cedictDictionary array in cedict-dictionary.ts');
}
const arrText = cedictRaw.slice(arrStart + 2, arrEnd + 1).trim();
const cedictArray = JSON.parse(arrText);

// Merge HSK levels
for (const entry of cedictArray) {
  const hanzi = entry.chinese;
  if (hskMap.has(hanzi)) {
    entry.hskLevel = hskMap.get(hanzi);
  }
}

// Write merged dictionary to new file
const header = `// Auto-generated by merge-hsk-to-dictionary.js\nexport interface DictionaryEntry {\n  chinese: string;\n  pinyin: string;\n  english: string;\n  hskLevel?: number;\n}\n\nexport const cedictDictionary: DictionaryEntry[] = `;
const output = header + JSON.stringify(cedictArray, null, 2) + ';\n';
fs.writeFileSync(outputPath, output, 'utf8');
console.log(`Merged dictionary written to ${outputPath}`);